name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches:
      - master

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install poetry directly instead of using a third-party action
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Install minimal Python dependencies
        run: |
          poetry install --only dev

      # Install bun directly instead of using a third-party action
      - name: Setup Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Install JS dependencies
        run: bun install

      - name: Run code quality checks
        run: |
          echo "Running all code quality checks via pre-commit..."
          poetry run pre-commit run --all-files

          # Add results to GitHub step summary
          echo "## Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "All pre-commit hooks passed successfully." >> $GITHUB_STEP_SUMMARY

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: [
          'unit',
          'integration',
          'api',
          'e2e'
        ]
    env:
      DJANGO_SETTINGS_MODULE: sbomify.test_settings
      DEBUG: True
      STRIPE_SECRET_KEY: 'sk_test_dummy_key_for_ci'
      STRIPE_PUBLISHABLE_KEY: 'pk_test_dummy_key_for_ci'
      STRIPE_WEBHOOK_SECRET: 'whsec_dummy_key_for_ci'
      STRIPE_ENDPOINT_SECRET: 'whsec_dummy_key_for_ci'
      DJANGO_TEST: 'true'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10.12"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Install Python dependencies
        run: |
          poetry install --with dev,test

      - name: Setup test environment
        run: |
          cp .env.example .env
          # Create static assets structure
          mkdir -p static/assets
          for file in main.js main.css teams.js teams.css billing.js billing.css sboms.js sboms.css django-messages.js alerts-global.js; do
            echo "// Test asset" > static/assets/$file
          done
          poetry run python manage.py collectstatic --noinput

      - name: Run Tests
        run: |
          echo "## Test Results for ${{ matrix.group }} Tests" >> $GITHUB_STEP_SUMMARY
          poetry run coverage run -m pytest --json-report --json-report-file=pytest-${{ matrix.group }}.json -k "${{ matrix.group }}"

          # Create test summary table
          echo "### Summary for ${{ matrix.group }} Tests" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          jq -r '"| Total Tests | \\(.summary.total) |\n| Passed | \\(.summary.passed) |\n| Failed | \\(.summary.failed) |\n| Skipped | \\(.summary.skipped) |\n| Duration | \\(.duration)s |"' pytest-${{ matrix.group }}.json >> $GITHUB_STEP_SUMMARY

          if [ $(jq '.summary.failed' pytest-${{ matrix.group }}.json) -gt 0 ]; then
            echo -e "\n### Failed Tests" >> $GITHUB_STEP_SUMMARY
            echo "| Test | Duration | Error |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-----------|-------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.tests[] | select(.outcome=="failed") | "| \\(.nodeid) | \\(.duration)s | \\(.call.longrepr) |"' pytest-${{ matrix.group }}.json >> $GITHUB_STEP_SUMMARY
          fi

          echo -e "\n## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          poetry run coverage report --fail-under=80 | tee >(cat >> $GITHUB_STEP_SUMMARY)
          echo '```' >> $GITHUB_STEP_SUMMARY

  docker-build:
    name: Docker Build Test
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Use Docker's built-in buildx instead of an action
      - name: Set up Docker Buildx
        run: docker buildx create --use

      # Use Docker CLI directly for caching
      - name: Docker Build Cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up test environment variables
        run: cp .env.example .env

      - name: Build Docker Image
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            .

      # Cache cleanup
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-staging:
    name: Deploy to Staging
    needs: [code-quality, docker-build]
    runs-on: ubuntu-latest
    if: ${{ success() && github.ref == 'refs/heads/master' && github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create fly.toml for staging
        run: |
          echo "${{ secrets.FLY_CONFIG_STAGE }}" > fly.toml

      - name: Deploy to staging
        run: |
          flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ success() && startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push' }}
    needs: [code-quality, tests, docker-build]
    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create fly.toml for production
        run: |
          echo "${{ secrets.FLY_CONFIG_PROD }}" > fly.toml

      - name: Deploy to production
        run: |
          flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}

  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    if: ${{ success() && startsWith(github.ref, 'refs/tags/v') }}
    needs: [deploy-production]
    steps:
      - uses: actions/checkout@v4

      - name: Upload SBOM
        uses: sbomify/github-action@master
        env:
          TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
          COMPONENT_ID: 2hg-dk8ixV
          LOCK_FILE: 'poetry.lock'
          AUGMENT: true
          UPLOAD: true
