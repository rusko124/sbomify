# Generated by Django 5.2.3 on 2025-07-08 09:31

from django.db import migrations


def ensure_teams_comply_with_user_limits(apps, schema_editor):
    """Ensure existing teams comply with new user limits."""
    Team = apps.get_model("teams", "Team")
    Member = apps.get_model("teams", "Member")
    BillingPlan = apps.get_model("billing", "BillingPlan")

    # Get community plan for teams without billing plans
    try:
        community_plan = BillingPlan.objects.get(key="community")
    except BillingPlan.DoesNotExist:
        # If plans don't exist yet, skip this migration
        return

    # Print statements are intentional for migration logging  # noqa: T201
    for team in Team.objects.all():
        member_count = Member.objects.filter(team=team).count()

        # Skip teams with no members
        if member_count == 0:
            continue

        # Handle teams without billing plan (default to community)
        if not team.billing_plan:
            # Set to community plan regardless of user count
            # Existing teams with >1 user will be grandfathered but can't add more
            team.billing_plan = community_plan.key
            team.save()
            if member_count > 1:
                print(f"Team '{team.name}' has {member_count} users on community plan (grandfathered)")  # noqa: T201
            continue

        # For teams with existing billing plans, just log if they exceed limits
        try:
            current_plan = BillingPlan.objects.get(key=team.billing_plan)

            # Skip if plan allows unlimited users
            if current_plan.max_users is None:
                continue

            # Log teams that exceed their plan's user limit (but don't change anything)
            if member_count > current_plan.max_users:
                print(  # noqa: T201
                    f"Team '{team.name}' has {member_count} users on {current_plan.name} plan "
                    f"(grandfathered, limit: {current_plan.max_users})"
                )

        except BillingPlan.DoesNotExist:
            # Invalid billing plan - set to community but don't auto-upgrade
            team.billing_plan = community_plan.key
            team.save()
            print(f"Fixed invalid billing plan for team '{team.name}' (had {member_count} users, set to community)")  # noqa: T201


def reverse_teams_user_limits_compliance(apps, schema_editor):
    """Reverse the compliance changes (no-op since we can't safely downgrade)."""
    # We don't reverse this migration as downgrading billing plans
    # could break functionality for existing teams
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("billing", "0006_populate_plan_user_limits"),
        ("teams", "0001_initial"),  # Ensure teams app is migrated
    ]

    operations = [
        migrations.RunPython(ensure_teams_comply_with_user_limits, reverse_teams_user_limits_compliance),
    ]
