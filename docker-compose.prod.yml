x-common-env: &common-env
  DATABASE_USER: ${DATABASE_USER:-sbomify}
  DATABASE_PASSWORD: ${DATABASE_PASSWORD:-sbomify}
  DATABASE_NAME: ${DATABASE_NAME:-sbomify}
  DATABASE_PORT: ${DATABASE_PORT:-5432}
  DATABASE_HOST: ${DATABASE_HOST:-localhost}
  DOCKER_DATABASE_HOST: ${DOCKER_DATABASE_HOST:-sbomify-db}

x-keycloak-env: &keycloak-env
  USE_KEYCLOAK: "True"
  KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL:-http://keycloak:8080/}
  KEYCLOAK_REALM: ${KEYCLOAK_REALM:-sbomify}
  KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-sbomify}
  KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-dev-client-secret}
  KEYCLOAK_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME:-admin}
  KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}

services:
  sbomify-db:
    image: postgres:15
    ports: []  # Remove exposed ports in production
    environment:
      - POSTGRES_DB=sbomify
      - POSTGRES_USER=sbomify
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  sbomify-minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports: []  # Remove exposed ports in production
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data
    restart: always

  sbomify-createbuckets:
    image: minio/mc
    depends_on:
      - sbomify-minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc config host add minio http://sbomify-minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      mc mb --ignore-existing minio/sbomify-media;
      mc mb --ignore-existing minio/sbomify-sboms;
      mc anonymous set download minio/sbomify-media;
      exit 0;
      "
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

  sbomify-backend:
    build:
      dockerfile: Dockerfile
    depends_on:
      - sbomify-db
      - sbomify-minio
      - sbomify-createbuckets
      - keycloak
    volumes: []  # Remove development volume mounts
    ports:
      - "8000:8000"  # Only expose the web port
    environment:
      <<: [*common-env, *keycloak-env]
      DATABASE_URL: postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DOCKER_DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
      AWS_ENDPOINT_URL_S3: http://sbomify-minio:9000
      AWS_MEDIA_STORAGE_BUCKET_NAME: sbomify-media
      AWS_SBOMS_STORAGE_BUCKET_NAME: sbomify-sboms
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SECRET_KEY: ${SECRET_KEY}
      APP_BASE_URL: ${APP_BASE_URL}
    command: poetry run gunicorn --bind :8000 --workers 2 sbomify.wsgi
    restart: always

  sbomify-migrations:
    build:
      dockerfile: Dockerfile
    depends_on:
      - sbomify-db
      - keycloak
    volumes: []  # Remove development volume mounts
    environment:
      <<: [*common-env, *keycloak-env]
      DATABASE_URL: postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DOCKER_DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.4
    restart: always
    environment:
      <<: *keycloak-env
      KC_HOSTNAME_URL: ${KEYCLOAK_SERVER_URL}
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KC_HEALTH_ENABLED: "true"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    command: start-dev

  keycloak-bootstrap:
    image: quay.io/keycloak/keycloak:26.1.4
    depends_on:
      - keycloak
    volumes:
      - ./bin/keycloak-bootstrap.sh:/keycloak-bootstrap.sh
    entrypoint: /bin/sh /keycloak-bootstrap.sh
    environment:
      <<: *keycloak-env
      KC_HOSTNAME_URL: ${KEYCLOAK_SERVER_URL}
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KC_HEALTH_ENABLED: "true"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

volumes:
  postgres_data:
  minio_data:
  keycloak_data: