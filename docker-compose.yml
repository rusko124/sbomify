services:
  sbomify-db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sbomify}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sbomify}
      POSTGRES_DB: ${POSTGRES_DB:-sbomify}
    ports:
      - "5432:5432"
    volumes:
      - sbomify_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sbomify}"]
      interval: 10s
      timeout: 2s
      retries: 10

  sbomify-minio:
    image: minio/minio:latest
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - sbomify_minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5

  sbomify-createbuckets:
    image: minio/mc
    depends_on:
      sbomify-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://sbomify-minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/sbomify-media;
      /usr/bin/mc mb myminio/sbomify-sboms;
      /usr/bin/mc anonymous set public myminio/sbomify-media;
      exit 0;
      "

  sbomify-backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    environment:
      AM_I_IN_DOCKER_CONTAINER: 1
      # Docker-specific Minio configuration
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_ENDPOINT_URL_S3: http://sbomify-minio:9000
      AWS_REGION: auto
      AWS_MEDIA_ACCESS_KEY_ID: minioadmin
      AWS_MEDIA_SECRET_ACCESS_KEY: minioadmin
      AWS_MEDIA_STORAGE_BUCKET_NAME: sbomify-media
      AWS_MEDIA_STORAGE_BUCKET_URL: http://sbomify-minio:9000/sbomify-media
      AWS_SBOMS_ACCESS_KEY_ID: minioadmin
      AWS_SBOMS_SECRET_ACCESS_KEY: minioadmin
      AWS_SBOMS_STORAGE_BUCKET_NAME: sbomify-sboms
      AWS_SBOMS_STORAGE_BUCKET_URL: http://sbomify-minio:9000/sbomify-sboms
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      sbomify-db:
        condition: service_healthy
      sbomify-migrations:
        condition: service_completed_successfully
      sbomify-createbuckets:
        condition: service_completed_successfully

  sbomify-migrations:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      AM_I_IN_DOCKER_CONTAINER: 1
      # Docker-specific Minio configuration
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_ENDPOINT_URL_S3: http://sbomify-minio:9000
      AWS_REGION: auto
      AWS_MEDIA_ACCESS_KEY_ID: minioadmin
      AWS_MEDIA_SECRET_ACCESS_KEY: minioadmin
      AWS_MEDIA_STORAGE_BUCKET_NAME: sbomify-media
      AWS_MEDIA_STORAGE_BUCKET_URL: http://sbomify-minio:9000/sbomify-media
      AWS_SBOMS_ACCESS_KEY_ID: minioadmin
      AWS_SBOMS_SECRET_ACCESS_KEY: minioadmin
      AWS_SBOMS_STORAGE_BUCKET_NAME: sbomify-sboms
      AWS_SBOMS_STORAGE_BUCKET_URL: http://sbomify-minio:9000/sbomify-sboms
    volumes:
      - .:/code
    command: poetry run python manage.py migrate
    depends_on:
      sbomify-db:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.4
    restart: always
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_DB: dev-file
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    command: start-dev

volumes:
  sbomify_postgres_data:
  sbomify_minio_data:
  keycloak_data:
