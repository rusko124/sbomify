# Generated by Django 5.2.3 on 2025-07-18 10:10

from django.db import migrations


def migrate_document_types_forward(apps, schema_editor):
    """Migrate existing document types to the new standardized types."""
    Document = apps.get_model('documents', 'Document')

    # Valid document types that should be preserved
    valid_types = {
        'specification', 'manual', 'readme', 'documentation', 'license',
        'compliance', 'changelog', 'report', 'other'
    }

    # Get all documents that need type migration
    documents = Document.objects.all()
    migration_count = 0

    for doc in documents:
        old_type = doc.document_type
        # Normalize to lowercase and check if it's a valid type
        normalized_type = old_type.lower() if old_type else ''
        new_type = normalized_type if normalized_type in valid_types else 'other'

        if old_type != new_type:
            doc.document_type = new_type
            doc.save(update_fields=['document_type'])
            migration_count += 1

    # Log summary instead of individual changes
    if migration_count > 0:
        print(f"Migrated {migration_count} documents to standardized types")


def migrate_document_types_reverse(apps, schema_editor):
    """Reverse migration - not implemented as it's not practical."""
    # Since we're doing a big-bang migration and this is low stakes,
    # we won't implement a reverse migration
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("documents", "0003_update_document_types_to_standards"),
    ]

    operations = [
        migrations.RunPython(
            migrate_document_types_forward,
            migrate_document_types_reverse,
        ),
    ]
