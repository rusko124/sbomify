"""
This migration is used to setup the Stripe billing system.

It creates the Stripe products and prices for the billing plans.
"""

# Generated by Django 5.1.4 on 2025-01-20 07:15
from django.conf import settings
from django.db import migrations
from django.db.models import Q
from django.db import models
import sys

PRICE_PLANS = {
    'business': {
        'annual': 159*12,
        'monthly': 199,
    }
}

def is_test_environment():
    """Helper to check if we're in test environment."""
    # Check for test environment indicators
    is_test = any([
        not getattr(settings, 'STRIPE_SECRET_KEY', None),  # Check if setting exists
        getattr(settings, 'STRIPE_SECRET_KEY', '') == 'sk_test_dummy_key_for_ci',
        getattr(settings, 'DJANGO_TEST', False),  # Check explicit test flag
        getattr(settings, 'TESTING', False),  # Check Django's test flag
        'test' in settings.DATABASES['default']['NAME'],
        'pytest' in sys.modules,
    ])

    if is_test:
        # Ensure stripe is not imported
        if 'stripe' in sys.modules:
            del sys.modules['stripe']
            # Also clear any cached API key
            import importlib
            if 'stripe.api_key' in sys.modules:
                del sys.modules['stripe.api_key']
    return is_test

def setup_stripe_billing(apps, schema_editor):
    # First thing: check test environment
    if is_test_environment():
        print("Skipping Stripe setup in test/CI environment")
        BillingPlan = apps.get_model('billing', 'BillingPlan')
        # Create dummy data for test environment
        for plan in BillingPlan.objects.filter(~Q(key__exact='community'),
                                             max_products__isnull=False,
                                             max_projects__isnull=False):
            plan.stripe_product_id = f'prod_test_{plan.key}'
            plan.stripe_price_monthly_id = f'price_test_monthly_{plan.key}'
            plan.stripe_price_annual_id = f'price_test_annual_{plan.key}'
            plan.save()
        return

    try:
        # Only import stripe if we're not in test environment
        import stripe
        import time

        if not settings.STRIPE_SECRET_KEY:
            print("No Stripe API key found, skipping Stripe setup")
            return

        BillingPlan = apps.get_model('billing', 'BillingPlan')
        stripe.api_key = settings.STRIPE_SECRET_KEY

        # Get existing Stripe products - only active ones
        existing_products = {p.name.lower(): p for p in stripe.Product.list(active=True, limit=100).data}  # Added active filter

        for plan in BillingPlan.objects.filter(~Q(key__exact='community'),
                                             max_products__isnull=False,
                                             max_projects__isnull=False):
            # Use title case for Stripe product name
            product_name = plan.key.title()

            # Check if product exists and is active
            if plan.key in existing_products:
                product = existing_products[plan.key]
                print(f"Using existing active product {product_name} ({product.id})")
            else:
                # Create new product with title case name
                product = stripe.Product.create(
                    name=product_name,
                    description=plan.description,
                )
                print(f"Created new product {product_name} ({product.id})")
                existing_products[plan.key] = product  # Add to cache

            # Store the product ID
            plan.stripe_product_id = product.id

            # Handle price creation
            if plan.key in PRICE_PLANS:
                # Get existing prices for this product
                existing_prices = stripe.Price.list(product=product.id).data

                # Helper to find matching price
                def find_price(amount, interval):
                    return next((p for p in existing_prices
                               if p.recurring.interval == interval
                               and p.unit_amount == amount), None)

                # Monthly price
                monthly_amount = PRICE_PLANS[plan.key]['monthly'] * 100
                monthly_price = find_price(monthly_amount, 'month')
                if not monthly_price:
                    monthly_price = stripe.Price.create(
                        product=product.id,
                        unit_amount=monthly_amount,
                        currency='usd',
                        recurring={'interval': 'month', 'interval_count': 1},
                        metadata={'billing_period': 'monthly'}
                    )
                    print(f"Created new monthly price for {product_name}")
                plan.stripe_price_monthly_id = monthly_price.id

                # Annual price
                annual_amount = PRICE_PLANS[plan.key]['annual'] * 100
                annual_price = find_price(annual_amount, 'year')
                if not annual_price:
                    annual_price = stripe.Price.create(
                        product=product.id,
                        unit_amount=annual_amount,
                        currency='usd',
                        recurring={'interval': 'year', 'interval_count': 1},
                        metadata={'billing_period': 'annual'}
                    )
                    print(f"Created new annual price for {product_name}")
                plan.stripe_price_annual_id = annual_price.id

                plan.save()
    except Exception as e:
        print(f"Error during Stripe setup: {str(e)}")
        return


def cleanup_stripe_billing(apps, schema_editor):
    BillingPlan = apps.get_model('billing', 'BillingPlan')

    # Simplified cleanup - only remove local references
    print("Clearing Stripe references from database")
    for plan in BillingPlan.objects.filter(~Q(key__exact='community'),
                                         max_products__isnull=False,
                                         max_projects__isnull=False):
        plan.stripe_product_id = None
        plan.stripe_price_monthly_id = None
        plan.stripe_price_annual_id = None
        plan.save()


class Migration(migrations.Migration):

    dependencies = [
        ("billing", "0002_billing_plans_data"),
    ]

    operations = [
        migrations.AddField(
            model_name="billingplan",
            name="stripe_product_id",
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="billingplan",
            name="stripe_price_monthly_id",
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="billingplan",
            name="stripe_price_annual_id",
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.RunPython(setup_stripe_billing, cleanup_stripe_billing),
    ]
