"""
Utility functions for onboarding email processing.
"""

import re
from html import unescape
from typing import Any, Dict

from django.template.loader import render_to_string
from django.utils.html import strip_tags


def render_email_templates(template_name: str, context: Dict[str, Any]) -> tuple[str, str]:
    """
    Render both HTML and plain text versions of an email template.

    The HTML version is rendered from the template, and the plain text version
    is automatically generated by stripping HTML tags and formatting.

    Args:
        template_name: Name of the HTML template (without .html.j2 extension)
        context: Template context dictionary

    Returns:
        Tuple of (html_content, plain_text_content)
    """
    # Render HTML version
    html_template = f"onboarding/emails/{template_name}.html.j2"
    html_content = render_to_string(html_template, context)

    # Generate plain text version from HTML
    plain_text_content = html_to_plain_text(html_content)

    return html_content, plain_text_content


def html_to_plain_text(html_content: str) -> str:
    """
    Convert HTML email content to well-formatted plain text.

    Args:
        html_content: HTML content string

    Returns:
        Plain text version of the content
    """
    # Remove script and style elements completely
    html_content = re.sub(r"<(script|style)[^>]*>.*?</\1>", "", html_content, flags=re.DOTALL | re.IGNORECASE)

    # Convert common HTML elements to plain text equivalents

    # Headers - add spacing and convert to uppercase for h1/h2
    html_content = re.sub(
        r"<h1[^>]*>(.*?)</h1>", r"\n\n\1\n" + "=" * 50 + "\n", html_content, flags=re.DOTALL | re.IGNORECASE
    )
    html_content = re.sub(
        r"<h2[^>]*>(.*?)</h2>", r"\n\n\1\n" + "-" * 30 + "\n", html_content, flags=re.DOTALL | re.IGNORECASE
    )
    html_content = re.sub(r"<h3[^>]*>(.*?)</h3>", r"\n\n\1:\n", html_content, flags=re.DOTALL | re.IGNORECASE)

    # Convert links to "text (url)" format
    html_content = re.sub(
        r'<a[^>]*href=["\']([^"\']*)["\'][^>]*>(.*?)</a>',
        r"\2 (\1)",
        html_content,
        flags=re.DOTALL | re.IGNORECASE,
    )

    # Convert list items
    html_content = re.sub(r"<li[^>]*>(.*?)</li>", r"â€¢ \1\n", html_content, flags=re.DOTALL | re.IGNORECASE)

    # Convert paragraphs to double newlines
    html_content = re.sub(r"<p[^>]*>(.*?)</p>", r"\1\n\n", html_content, flags=re.DOTALL | re.IGNORECASE)

    # Convert line breaks
    html_content = re.sub(r"<br[^>]*/?>", "\n", html_content, flags=re.IGNORECASE)

    # Convert divs with highlight-box class to emphasized sections
    html_content = re.sub(
        r'<div[^>]*class=["\'][^"\']*highlight-box[^"\']*["\'][^>]*>(.*?)</div>',
        r"\n--- \1 ---\n",
        html_content,
        flags=re.DOTALL | re.IGNORECASE,
    )

    # Convert other divs to paragraph breaks
    html_content = re.sub(r"<div[^>]*>(.*?)</div>", r"\1\n\n", html_content, flags=re.DOTALL | re.IGNORECASE)

    # Handle strong/bold text - keep the text but remove tags
    html_content = re.sub(r"<(strong|b)[^>]*>(.*?)</\1>", r"\2", html_content, flags=re.DOTALL | re.IGNORECASE)

    # Handle emphasis/italic text
    html_content = re.sub(r"<(em|i)[^>]*>(.*?)</\1>", r"\2", html_content, flags=re.DOTALL | re.IGNORECASE)

    # Strip remaining HTML tags
    plain_text = strip_tags(html_content)

    # Decode HTML entities
    plain_text = unescape(plain_text)

    # Clean up whitespace
    # Remove multiple consecutive newlines (more than 2)
    plain_text = re.sub(r"\n{3,}", "\n\n", plain_text)

    # Remove leading/trailing whitespace from each line
    lines = [line.strip() for line in plain_text.split("\n")]
    plain_text = "\n".join(lines)

    # Remove leading/trailing whitespace from entire content
    plain_text = plain_text.strip()

    return plain_text


def get_email_context(user, **additional_context) -> Dict[str, Any]:
    """
    Build the standard email context for onboarding emails.

    Args:
        user: User instance
        **additional_context: Additional context variables

    Returns:
        Dictionary with email template context
    """
    from django.conf import settings

    from sbomify.apps.onboarding.models import OnboardingStatus

    # Get or create onboarding status
    onboarding_status, _ = OnboardingStatus.objects.get_or_create(user=user)

    # Get workspace information
    workspace_name = None
    workspace_key = None
    if hasattr(user, "member_set") and user.member_set.exists():
        # Get the user's default team/workspace
        default_membership = user.member_set.filter(is_default_team=True).first()
        if not default_membership:
            default_membership = user.member_set.first()

        if default_membership:
            workspace_name = default_membership.team.name
            workspace_key = default_membership.team.key

    context = {
        "user": user,
        "user_role": onboarding_status.user_role,
        "workspace_name": workspace_name,
        "workspace_key": workspace_key,
        "app_base_url": settings.APP_BASE_URL.rstrip("/"),
        "website_base_url": settings.WEBSITE_BASE_URL.rstrip("/"),
        "onboarding_status": onboarding_status,
    }

    # Add any additional context
    context.update(additional_context)

    return context
