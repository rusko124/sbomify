# Generated by Django 5.1 on 2024-09-01 02:55
# This migration is a bit complex as it involves creating temporary models, copying data to them,
# removing the original models, recreating original models with ruids as primary keys,
# copying data back to the original models with ruids as primary keys,
# and then removing the temporary models.
import django.db.models.deletion
from django.db import migrations, models
from ruid import ruid


temp_tables_create_operations_dict = {
    "TempProduct": dict(
        name="TempProduct",
        fields=[
            (
                "id",
                models.BigAutoField(
                    auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                ),
            ),
            ("name", models.CharField(max_length=255)),
            ("created_at", models.DateTimeField(auto_now_add=True)),
            ("is_public", models.BooleanField(default=False)),
            (
                "team",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="teams.team"),
            ),
        ],
        options={
            "db_table": "sboms_temp_products",
            "unique_together": {("team", "name")},
        },
    ),
    "TempProject": dict(
        name="TempProject",
        fields=[
            (
                "id",
                models.BigAutoField(
                    auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                ),
            ),
            ("name", models.CharField(max_length=255)),
            ("created_at", models.DateTimeField(auto_now_add=True)),
            ("is_public", models.BooleanField(default=False)),
            (
                "team",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="teams.team"),
            ),
        ],
        options={
            "db_table": "sboms_temp_projects",
            "unique_together": {("team", "name")},
        },
    ),
    "TempProductProject": dict(
        name="TempProductProject",
        fields=[
            (
                "id",
                models.BigAutoField(
                    auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                ),
            ),
            (
                "product",
                models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to="sboms.tempproduct"
                ),
            ),
            (
                "project",
                models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to="sboms.tempproject"
                ),
            ),
        ],
        options={
            "db_table": "sboms_temp_products_projects",
            "unique_together": {("product", "project")},
        },
    ),
    "TempComponent": dict(
        name="TempComponent",
        fields=[
            (
                "id",
                models.BigAutoField(
                    auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                ),
            ),
            ("name", models.CharField(max_length=255)),
            ("created_at", models.DateTimeField(auto_now_add=True)),
            ("is_public", models.BooleanField(default=False)),
            (
                "team",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="teams.team"),
            ),
        ],
        options={
            "db_table": "sboms_temp_components",
            "unique_together": {("team", "name")},
        },
    ),
    "TempProjectComponent": dict(
        name="TempProjectComponent",
        fields=[
            (
                "id",
                models.BigAutoField(
                    auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                ),
            ),
            (
                "project",
                models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to="sboms.tempproject"
                ),
            ),
            (
                "component",
                models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to="sboms.tempcomponent"
                ),
            ),
        ],
        options={
            "db_table": "sboms_temp_projects_components",
            "unique_together": {("project", "component")},
        },
    ),
    "TempSBOM": dict(
        name="TempSBOM",
        fields=[
            (
                "id",
                models.BigAutoField(
                    auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                ),
            ),
            ("name", models.CharField(max_length=255)),
            ("version", models.CharField(max_length=255, default="")),
            ("format", models.CharField(max_length=255, default="spdx")),
            ("license", models.CharField(max_length=255, default="")),
            ("data", models.JSONField()),
            ("created_at", models.DateTimeField(auto_now_add=True)),
            ("source", models.CharField(max_length=255, null=True)),
            (
                "component",
                models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to="sboms.tempcomponent"
                ),
            ),
        ],
        options={
            "db_table": "sboms_temp_sboms",
        },
    ),
    "TempSBOMPackage": dict(
        name="TempSBOMPackage",
        fields=[
            (
                "id",
                models.BigAutoField(
                    auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                ),
            ),
            (
                "sbom",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sboms.tempsbom"),
            ),
            (
                "package",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sboms.package"),
            ),
        ],
        options={
            "db_table": "sboms_temp_sbom_packages",
            "unique_together": {("sbom", "package")},
        },
    ),
}

new_tables_create_operations_dict = {
    "Product": dict(
        name="Product",
        fields=[
            (
                "id",
                models.CharField(max_length=20, primary_key=True, default=ruid, verbose_name="ID"),
            ),
            ("name", models.CharField(max_length=255)),
            ("created_at", models.DateTimeField(auto_now_add=True)),
            ("is_public", models.BooleanField(default=False)),
            (
                "team",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="teams.team"),
            ),
        ],
        options={
            "db_table": "sboms_products",
            "unique_together": {("team", "name")},
        },
    ),
    "Project": dict(
        name="Project",
        fields=[
            (
                "id",
                models.CharField(max_length=20, primary_key=True, default=ruid, verbose_name="ID"),
            ),
            ("name", models.CharField(max_length=255)),
            ("created_at", models.DateTimeField(auto_now_add=True)),
            ("is_public", models.BooleanField(default=False)),
            (
                "team",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="teams.team"),
            ),
        ],
        options={
            "db_table": "sboms_projects",
            "unique_together": {("team", "name")},
        },
    ),
    "ProductProject": dict(
        name="ProductProject",
        fields=[
            (
                "id",
                models.CharField(max_length=20, primary_key=True, default=ruid, verbose_name="ID"),
            ),
            (
                "product",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sboms.product"),
            ),
            (
                "project",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sboms.project"),
            ),
        ],
        options={
            "db_table": "sboms_products_projects",
            "unique_together": {("product", "project")},
        },
    ),
    "Component": dict(
        name="Component",
        fields=[
            (
                "id",
                models.CharField(max_length=20, primary_key=True, default=ruid, verbose_name="ID"),
            ),
            ("name", models.CharField(max_length=255)),
            ("created_at", models.DateTimeField(auto_now_add=True)),
            ("is_public", models.BooleanField(default=False)),
            (
                "team",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="teams.team"),
            ),
        ],
        options={
            "db_table": "sboms_components",
            "unique_together": {("team", "name")},
        },
    ),
    "ProjectComponent": dict(
        name="ProjectComponent",
        fields=[
            (
                "id",
                models.CharField(max_length=20, primary_key=True, default=ruid, verbose_name="ID"),
            ),
            (
                "project",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sboms.project"),
            ),
            (
                "component",
                models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to="sboms.component"
                ),
            ),
        ],
        options={
            "db_table": "sboms_projects_components",
            "unique_together": {("project", "component")},
        },
    ),
    "SBOM": dict(
        name="SBOM",
        fields=[
            (
                "id",
                models.CharField(max_length=20, primary_key=True, default=ruid, verbose_name="ID"),
            ),
            ("name", models.CharField(max_length=255)),
            ("version", models.CharField(max_length=255, default="")),
            ("format", models.CharField(max_length=255, default="spdx")),
            ("license", models.CharField(max_length=255, default="")),
            ("data", models.JSONField()),
            ("created_at", models.DateTimeField(auto_now_add=True)),
            ("source", models.CharField(max_length=255, null=True)),
            (
                "component",
                models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to="sboms.component"
                ),
            ),
        ],
        options={
            "db_table": "sboms_sboms",
        },
    ),
    "SBOMPackage": dict(
        name="SBOMPackage",
        fields=[
            (
                "id",
                models.CharField(max_length=20, primary_key=True, default=ruid, verbose_name="ID"),
            ),
            (
                "sbom",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sboms.sbom"),
            ),
            (
                "package",
                models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sboms.package"),
            ),
        ],
        options={
            "db_table": "sboms_sbom_packages",
            "unique_together": {("sbom", "package")},
        },
    ),
}


def get_temporary_models(apps):
    Team = apps.get_model("teams", "Team")
    Package = apps.get_model("sboms", "Package")

    class TempProduct(models.Model):
        class Meta:
            db_table = "sboms_temp_products"
            unique_together = ("team", "name")

        team = models.ForeignKey(Team, on_delete=models.CASCADE)
        name = models.CharField(max_length=255, blank=False)
        created_at = models.DateTimeField(auto_now_add=True)
        is_public = models.BooleanField(default=False)

    class TempProject(models.Model):
        class Meta:
            db_table = "sboms_temp_projects"
            unique_together = ("team", "name")

        team = models.ForeignKey(Team, on_delete=models.CASCADE)
        name = models.CharField(max_length=255, blank=False)
        created_at = models.DateTimeField(auto_now_add=True)
        is_public = models.BooleanField(default=False)
        team = models.ForeignKey(Team, on_delete=models.CASCADE)

    class TempProductProject(models.Model):
        class Meta:
            db_table = "sboms_temp_products_projects"
            unique_together = ("product", "project")

        product = models.ForeignKey(TempProduct, on_delete=models.CASCADE)
        project = models.ForeignKey(TempProject, on_delete=models.CASCADE)

    class TempComponent(models.Model):
        class Meta:
            db_table = "sboms_temp_components"
            unique_together = ("team", "name")

        team = models.ForeignKey(Team, on_delete=models.CASCADE)
        name = models.CharField(max_length=255, blank=False)
        created_at = models.DateTimeField(auto_now_add=True)
        is_public = models.BooleanField(default=False)

    class TempProjectComponent(models.Model):
        class Meta:
            db_table = "sboms_temp_projects_components"
            unique_together = ("project", "component")

        project = models.ForeignKey(TempProject, on_delete=models.CASCADE)
        component = models.ForeignKey(TempComponent, on_delete=models.CASCADE)

    class TempSBOM(models.Model):
        class Meta:
            db_table = "sboms_temp_sboms"

        name = models.CharField(
            max_length=255, blank=False
        )  # qualified sbom name like com.github.sbomify/backend
        version = models.CharField(max_length=255, default="")
        format = models.CharField(max_length=255, default="spdx")  # spdx, cyclonedx, etc
        license = models.CharField(max_length=255, default="")
        data = models.JSONField()
        created_at = models.DateTimeField(auto_now_add=True)
        # Where the sbom came from (file-upload, api, github-action, etc)
        source = models.CharField(max_length=255, null=True)
        component = models.ForeignKey(TempComponent, on_delete=models.CASCADE)

    class TempSBOMPackage(models.Model):
        class Meta:
            db_table = "sboms_temp_sbom_packages"
            unique_together = ("sbom", "package")

        sbom = models.ForeignKey(TempSBOM, on_delete=models.CASCADE)
        package = models.ForeignKey(Package, on_delete=models.CASCADE)

    return (
        TempProduct,
        TempProject,
        TempProductProject,
        TempComponent,
        TempProjectComponent,
        TempSBOM,
        TempSBOMPackage,
    )


def set_temporary_models_in_apps(apps, schema_editor):

    (
        TempProduct,
        TempProject,
        TempProductProject,
        TempComponent,
        TempProjectComponent,
        TempSBOM,
        TempSBOMPackage,
    ) = get_temporary_models(apps)

    apps.register_model("sboms", TempProduct)
    apps.register_model("sboms", TempProject)
    apps.register_model("sboms", TempProductProject)
    apps.register_model("sboms", TempComponent)
    apps.register_model("sboms", TempProjectComponent)
    apps.register_model("sboms", TempSBOM)
    apps.register_model("sboms", TempSBOMPackage)


def copy_data_to_temporary_models(apps, schema_editor):

    Product = apps.get_model("sboms", "Product")
    TempProduct = apps.get_model("sboms", "TempProduct")

    for product in Product.objects.all():
        temp_product = TempProduct(
            id=product.id,
            team_id=product.team_id,
            name=product.name,
            created_at=product.created_at,
            is_public=product.is_public,
        )
        temp_product.save()
        temp_product.created_at = (
            product.created_at
        )  # auto_now_add=True causes current date as created_at
        temp_product.save()

    Project = apps.get_model("sboms", "Project")
    TempProject = apps.get_model("sboms", "TempProject")

    for project in Project.objects.all():
        temp_project = TempProject(
            id=project.id,
            team_id=project.team_id,
            name=project.name,
            created_at=project.created_at,
            is_public=project.is_public,
        )
        temp_project.save()
        temp_project.created_at = project.created_at
        temp_project.save()

    ProductProject = apps.get_model("sboms", "ProductProject")
    TempProductProject = apps.get_model("sboms", "TempProductProject")

    for product_project in ProductProject.objects.all():
        temp_product_project = TempProductProject(
            id=product_project.id,
            product_id=product_project.product_id,
            project_id=product_project.project_id,
        )
        temp_product_project.save()

    Component = apps.get_model("sboms", "Component")
    TempComponent = apps.get_model("sboms", "TempComponent")

    for component in Component.objects.all():
        temp_component = TempComponent(
            id=component.id,
            team_id=component.team_id,
            name=component.name,
            created_at=component.created_at,
            is_public=component.is_public,
        )
        temp_component.save()
        temp_component.created_at = component.created_at
        temp_component.save()

    ProjectComponent = apps.get_model("sboms", "ProjectComponent")
    TempProjectComponent = apps.get_model("sboms", "TempProjectComponent")

    for project_component in ProjectComponent.objects.all():
        temp_project_component = TempProjectComponent(
            id=project_component.id,
            project_id=project_component.project_id,
            component_id=project_component.component_id,
        )
        temp_project_component.save()

    SBOM = apps.get_model("sboms", "SBOM")
    TempSBOM = apps.get_model("sboms", "TempSBOM")

    for sbom in SBOM.objects.all():
        temp_sbom = TempSBOM(
            id=sbom.id,
            name=sbom.name,
            version=sbom.version,
            format=sbom.format,
            license=sbom.license,
            data=sbom.data,
            created_at=sbom.created_at,
            source=sbom.source,
            component_id=sbom.component_id,
        )
        temp_sbom.save()
        temp_sbom.created_at = sbom.created_at
        temp_sbom.save()

    SBOMPackage = apps.get_model("sboms", "SBOMPackage")
    TempSBOMPackage = apps.get_model("sboms", "TempSBOMPackage")

    for sbom_package in SBOMPackage.objects.all():
        temp_sbom_package = TempSBOMPackage(
            id=sbom_package.id,
            sbom_id=sbom_package.sbom_id,
            package_id=sbom_package.package_id,
        )
        temp_sbom_package.save()


def copy_data_to_temporary_models_reverse_migration(apps, schema_editor):

    Product = apps.get_model("sboms", "Product")
    TempProduct = apps.get_model("sboms", "TempProduct")

    for temp_product in TempProduct.objects.all():
        product = Product(
            id=temp_product.id,
            team_id=temp_product.team_id,
            name=temp_product.name,
            created_at=temp_product.created_at,
            is_public=temp_product.is_public,
        )
        product.save()
        # auto_now_add=True causes current date as created_at
        product.created_at = temp_product.created_at
        product.save()

    Project = apps.get_model("sboms", "Project")
    TempProject = apps.get_model("sboms", "TempProject")

    for temp_project in TempProject.objects.all():
        project = Project(
            id=temp_project.id,
            team_id=temp_project.team_id,
            name=temp_project.name,
            created_at=temp_project.created_at,
            is_public=temp_project.is_public,
        )
        project.save()
        project.created_at = temp_project.created_at
        project.save()

    ProductProject = apps.get_model("sboms", "ProductProject")
    TempProductProject = apps.get_model("sboms", "TempProductProject")

    for temp_product_project in TempProductProject.objects.all():
        product_project = ProductProject(
            id=temp_product_project.id,
            product_id=temp_product_project.product_id,
            project_id=temp_product_project.project_id,
        )
        product_project.save()

    Component = apps.get_model("sboms", "Component")
    TempComponent = apps.get_model("sboms", "TempComponent")

    for temp_component in TempComponent.objects.all():
        component = Component(
            id=temp_component.id,
            team_id=temp_component.team_id,
            name=temp_component.name,
            created_at=temp_component.created_at,
            is_public=temp_component.is_public,
        )
        component.save()
        component.created_at = temp_component.created_at
        component.save()

    ProjectComponent = apps.get_model("sboms", "ProjectComponent")
    TempProjectComponent = apps.get_model("sboms", "TempProjectComponent")

    for temp_project_component in TempProjectComponent.objects.all():
        project_component = ProjectComponent(
            id=temp_project_component.id,
            project_id=temp_project_component.project_id,
            component_id=temp_project_component.component_id,
        )
        project_component.save()

    SBOM = apps.get_model("sboms", "SBOM")
    TempSBOM = apps.get_model("sboms", "TempSBOM")

    for temp_sbom in TempSBOM.objects.all():
        sbom = SBOM(
            id=temp_sbom.id,
            name=temp_sbom.name,
            version=temp_sbom.version,
            format=temp_sbom.format,
            license=temp_sbom.license,
            data=temp_sbom.data,
            created_at=temp_sbom.created_at,
            source=temp_sbom.source,
            component_id=temp_sbom.component_id,
        )
        sbom.save()
        sbom.created_at = temp_sbom.created_at
        sbom.save()

    SBOMPackage = apps.get_model("sboms", "SBOMPackage")
    TempSBOMPackage = apps.get_model("sboms", "TempSBOMPackage")

    for temp_sbom_package in TempSBOMPackage.objects.all():
        sbom_package = SBOMPackage(
            id=temp_sbom_package.id,
            sbom_id=temp_sbom_package.sbom_id,
            package_id=temp_sbom_package.package_id,
        )
        sbom_package.save()


def copy_data_to_new_models(apps, schema_editor):
    Product = apps.get_model("sboms", "Product")
    TempProduct = apps.get_model("sboms", "TempProduct")
    product_id_to_key_map = {}

    for temp_product in TempProduct.objects.all():
        product = Product(
            id=ruid(),
            team_id=temp_product.team_id,
            name=temp_product.name,
            created_at=temp_product.created_at,
            is_public=temp_product.is_public,
        )
        product.save()
        # auto_now_add=True causes current date as created_at
        product.created_at = temp_product.created_at
        product.save()
        product_id_to_key_map[temp_product.id] = product.id

    Project = apps.get_model("sboms", "Project")
    TempProject = apps.get_model("sboms", "TempProject")
    project_id_to_key_map = {}

    for temp_project in TempProject.objects.all():
        project = Project(
            id=ruid(),
            team_id=temp_project.team_id,
            name=temp_project.name,
            created_at=temp_project.created_at,
            is_public=temp_project.is_public,
        )
        project.save()
        project.created_at = temp_project.created_at
        project.save()
        project_id_to_key_map[temp_project.id] = project.id

    ProductProject = apps.get_model("sboms", "ProductProject")
    TempProductProject = apps.get_model("sboms", "TempProductProject")

    for temp_product_project in TempProductProject.objects.all():
        product_project = ProductProject(
            id=ruid(),
            product_id=product_id_to_key_map[temp_product_project.product_id],
            project_id=project_id_to_key_map[temp_product_project.project_id],
        )
        product_project.save()

    Component = apps.get_model("sboms", "Component")
    TempComponent = apps.get_model("sboms", "TempComponent")
    component_id_to_key_map = {}

    for temp_component in TempComponent.objects.all():
        component = Component(
            id=ruid(),
            team_id=temp_component.team_id,
            name=temp_component.name,
            created_at=temp_component.created_at,
            is_public=temp_component.is_public,
        )
        component.save()
        component.created_at = temp_component.created_at
        component.save()
        component_id_to_key_map[temp_component.id] = component.id

    ProjectComponent = apps.get_model("sboms", "ProjectComponent")
    TempProjectComponent = apps.get_model("sboms", "TempProjectComponent")

    for temp_project_component in TempProjectComponent.objects.all():
        project_component = ProjectComponent(
            id=ruid(),
            project_id=project_id_to_key_map[temp_project_component.project_id],
            component_id=component_id_to_key_map[temp_project_component.component_id],
        )
        project_component.save()

    SBOM = apps.get_model("sboms", "SBOM")
    TempSBOM = apps.get_model("sboms", "TempSBOM")
    sbom_id_to_key_map = {}

    for temp_sbom in TempSBOM.objects.all():
        sbom = SBOM(
            id=ruid(),
            name=temp_sbom.name,
            version=temp_sbom.version,
            format=temp_sbom.format,
            license=temp_sbom.license,
            data=temp_sbom.data,
            created_at=temp_sbom.created_at,
            source=temp_sbom.source,
            component_id=component_id_to_key_map[temp_sbom.component_id],
        )
        sbom.save()
        sbom.created_at = temp_sbom.created_at
        sbom.save()
        sbom_id_to_key_map[temp_sbom.id] = sbom.id

    SBOMPackage = apps.get_model("sboms", "SBOMPackage")
    TempSBOMPackage = apps.get_model("sboms", "TempSBOMPackage")

    for temp_sbom_package in TempSBOMPackage.objects.all():
        sbom_package = SBOMPackage(
            id=ruid(),
            sbom_id=sbom_id_to_key_map[temp_sbom_package.sbom_id],
            package_id=temp_sbom_package.package_id,
        )
        sbom_package.save()


def copy_data_to_new_models_reverse_migration(apps, schema_editor):

    Product = apps.get_model("sboms", "Product")
    TempProduct = apps.get_model("sboms", "TempProduct")
    product_key_to_id_map = {}

    for product in Product.objects.all():
        temp_product = TempProduct(
            team_id=product.team_id,
            name=product.name,
            created_at=product.created_at,
            is_public=product.is_public,
        )
        temp_product.save()
        # auto_now_add=True causes current date as created_at
        temp_product.created_at = product.created_at
        temp_product.save()
        product_key_to_id_map[product.id] = temp_product.id

    Project = apps.get_model("sboms", "Project")
    TempProject = apps.get_model("sboms", "TempProject")
    project_key_to_id_map = {}

    for project in Project.objects.all():
        temp_project = TempProject(
            team_id=project.team_id,
            name=project.name,
            created_at=project.created_at,
            is_public=project.is_public,
        )
        temp_project.save()
        temp_project.created_at = project.created_at
        temp_project.save()
        project_key_to_id_map[project.id] = temp_project.id

    ProductProject = apps.get_model("sboms", "ProductProject")
    TempProductProject = apps.get_model("sboms", "TempProductProject")

    for product_project in ProductProject.objects.all():
        temp_product_project = TempProductProject(
            product_id=product_key_to_id_map[product_project.product_id],
            project_id=project_key_to_id_map[product_project.project_id],
        )
        temp_product_project.save()

    Component = apps.get_model("sboms", "Component")
    TempComponent = apps.get_model("sboms", "TempComponent")
    component_key_to_id_map = {}

    for component in Component.objects.all():
        temp_component = TempComponent(
            team_id=component.team_id,
            name=component.name,
            created_at=component.created_at,
            is_public=component.is_public,
        )
        temp_component.save()
        temp_component.created_at = component.created_at
        temp_component.save()
        component_key_to_id_map[component.id] = temp_component.id

    ProjectComponent = apps.get_model("sboms", "ProjectComponent")
    TempProjectComponent = apps.get_model("sboms", "TempProjectComponent")

    for project_component in ProjectComponent.objects.all():
        temp_project_component = TempProjectComponent(
            project_id=project_key_to_id_map[project_component.project_id],
            component_id=component_key_to_id_map[project_component.component_id],
        )
        temp_project_component.save()

    SBOM = apps.get_model("sboms", "SBOM")
    TempSBOM = apps.get_model("sboms", "TempSBOM")
    sbom_key_to_id_map = {}

    for sbom in SBOM.objects.all():
        temp_sbom = TempSBOM(
            name=sbom.name,
            version=sbom.version,
            format=sbom.format,
            license=sbom.license,
            data=sbom.data,
            created_at=sbom.created_at,
            source=sbom.source,
            component_id=component_key_to_id_map[sbom.component_id],
        )
        temp_sbom.save()
        temp_sbom.created_at = sbom.created_at
        temp_sbom.save()
        sbom_key_to_id_map[sbom.id] = temp_sbom.id

    SBOMPackage = apps.get_model("sboms", "SBOMPackage")
    TempSBOMPackage = apps.get_model("sboms", "TempSBOMPackage")

    for sbom_package in SBOMPackage.objects.all():
        temp_sbom_package = TempSBOMPackage(
            sbom_id=sbom_key_to_id_map[sbom_package.sbom_id],
            package_id=sbom_package.package_id,
        )
        temp_sbom_package.save()


class Migration(migrations.Migration):

    dependencies = [
        ("sboms", "0019_rename_license_name_package_license_sbom_license"),
    ]

    operations = [
        migrations.RunPython(set_temporary_models_in_apps, reverse_code=migrations.RunPython.noop),
        migrations.CreateModel(**temp_tables_create_operations_dict["TempProduct"]),
        migrations.CreateModel(**temp_tables_create_operations_dict["TempProject"]),
        migrations.CreateModel(**temp_tables_create_operations_dict["TempProductProject"]),
        migrations.CreateModel(**temp_tables_create_operations_dict["TempComponent"]),
        migrations.CreateModel(**temp_tables_create_operations_dict["TempProjectComponent"]),
        migrations.CreateModel(**temp_tables_create_operations_dict["TempSBOM"]),
        migrations.CreateModel(**temp_tables_create_operations_dict["TempSBOMPackage"]),
        migrations.RunPython(
            copy_data_to_temporary_models,
            reverse_code=copy_data_to_temporary_models_reverse_migration,
        ),
        migrations.DeleteModel(name="SBOMPackage"),
        migrations.DeleteModel(name="SBOM"),
        migrations.DeleteModel(name="ProjectComponent"),
        migrations.DeleteModel(name="Component"),
        migrations.DeleteModel(name="ProductProject"),
        migrations.DeleteModel(name="Project"),
        migrations.DeleteModel(name="Product"),
        migrations.CreateModel(**new_tables_create_operations_dict["Product"]),
        migrations.CreateModel(**new_tables_create_operations_dict["Project"]),
        migrations.CreateModel(**new_tables_create_operations_dict["ProductProject"]),
        migrations.CreateModel(**new_tables_create_operations_dict["Component"]),
        migrations.CreateModel(**new_tables_create_operations_dict["ProjectComponent"]),
        migrations.CreateModel(**new_tables_create_operations_dict["SBOM"]),
        migrations.CreateModel(**new_tables_create_operations_dict["SBOMPackage"]),
        migrations.RunPython(
            copy_data_to_new_models,
            reverse_code=copy_data_to_new_models_reverse_migration,
        ),
        migrations.DeleteModel(name="TempSBOMPackage"),
        migrations.DeleteModel(name="TempSBOM"),
        migrations.DeleteModel(name="TempProjectComponent"),
        migrations.DeleteModel(name="TempComponent"),
        migrations.DeleteModel(name="TempProductProject"),
        migrations.DeleteModel(name="TempProject"),
        migrations.DeleteModel(name="TempProduct"),
    ]
