"""Admin interface for vulnerability scanning models."""

from django import forms
from django.contrib import admin
from django.utils.html import format_html

from .models import (
    ComponentDependencyTrackMapping,
    DependencyTrackServer,
    TeamVulnerabilitySettings,
    VulnerabilityScanResult,
)


class DependencyTrackServerAdminForm(forms.ModelForm):
    """Custom form for DependencyTrackServer with write-only API key field."""

    api_key = forms.CharField(
        widget=forms.PasswordInput(render_value=False),
        required=False,
        help_text="API key for authentication. Leave blank to keep current value, or enter new value to update.",
    )

    class Meta:
        model = DependencyTrackServer
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Make API key required only for new instances
        if not self.instance.pk:
            self.fields["api_key"].required = True
            self.fields["api_key"].help_text = "API key for authentication"

    def save(self, commit=True):
        """Handle write-only behavior for API key field."""
        instance = super().save(commit=False)
        new_api_key = self.cleaned_data.get("api_key")
        if new_api_key:
            instance.api_key = new_api_key
        if commit:
            instance.save()
        return instance


@admin.register(DependencyTrackServer)
class DependencyTrackServerAdmin(admin.ModelAdmin):
    """Admin configuration for DependencyTrackServer model."""

    form = DependencyTrackServerAdminForm

    list_display = (
        "name",
        "url",
        "health_status_display",
        "is_active",
        "priority",
        "scan_capacity_display",
        "last_health_check",
        "created_at",
    )

    list_filter = (
        "is_active",
        "health_status",
        "priority",
        "created_at",
    )

    search_fields = (
        "name",
        "url",
    )

    readonly_fields = (
        "id",
        "current_scan_count",
        "last_health_check",
        "health_status",
        "created_at",
        "updated_at",
        "scan_capacity_display",
        "health_status_display",
    )

    fieldsets = (
        (
            "Server Information",
            {
                "fields": (
                    "id",
                    "name",
                    "url",
                    "api_key",
                )
            },
        ),
        (
            "Configuration",
            {
                "fields": (
                    "is_active",
                    "priority",
                    "max_concurrent_scans",
                    "scan_capacity_display",
                )
            },
        ),
        (
            "Health & Status",
            {
                "fields": (
                    "health_status_display",
                    "current_scan_count",
                    "last_health_check",
                )
            },
        ),
        (
            "Timestamps",
            {
                "fields": (
                    "created_at",
                    "updated_at",
                ),
                "classes": ("collapse",),
            },
        ),
    )

    def health_status_display(self, obj):
        """Display health status with color coding."""
        status_colors = {
            "healthy": "#28a745",
            "degraded": "#ffc107",
            "unhealthy": "#dc3545",
            "unknown": "#6c757d",
        }
        color = status_colors.get(obj.health_status, "#6c757d")
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>', color, obj.get_health_status_display()
        )

    health_status_display.short_description = "Health Status"

    def scan_capacity_display(self, obj):
        """Display scan capacity as current/max."""
        if obj.current_scan_count >= obj.max_concurrent_scans:
            color = "#dc3545"  # Red when at capacity
        elif obj.current_scan_count >= obj.max_concurrent_scans * 0.8:
            color = "#ffc107"  # Yellow when close to capacity
        else:
            color = "#28a745"  # Green when available

        return format_html(
            '<span style="color: {}; font-weight: bold;">{}/{}</span>',
            color,
            obj.current_scan_count,
            obj.max_concurrent_scans,
        )

    scan_capacity_display.short_description = "Scan Capacity"

    actions = ["mark_active", "mark_inactive", "health_check"]

    def mark_active(self, request, queryset):
        """Mark selected servers as active."""
        updated = queryset.update(is_active=True)
        self.message_user(request, f"{updated} servers marked as active.")

    mark_active.short_description = "Mark selected servers as active"

    def mark_inactive(self, request, queryset):
        """Mark selected servers as inactive."""
        updated = queryset.update(is_active=False)
        self.message_user(request, f"{updated} servers marked as inactive.")

    mark_inactive.short_description = "Mark selected servers as inactive"

    def health_check(self, request, queryset):
        """Trigger health check for selected servers."""
        from .tasks import check_dependency_track_health_task

        server_count = queryset.count()

        if server_count == 1:
            # Single server - run task for specific server
            server = queryset.first()
            check_dependency_track_health_task.send(str(server.id))
            self.message_user(
                request, f"Health check task queued for server '{server.name}'. Check the logs for results."
            )
        else:
            # Multiple servers - run individual tasks for each
            for server in queryset:
                check_dependency_track_health_task.send(str(server.id))

            self.message_user(
                request, f"Health check tasks queued for {server_count} servers. Check the logs for results."
            )

    health_check.short_description = "Run health check"


@admin.register(TeamVulnerabilitySettings)
class TeamVulnerabilitySettingsAdmin(admin.ModelAdmin):
    """Admin configuration for TeamVulnerabilitySettings model."""

    list_display = (
        "team",
        "vulnerability_provider_display",
        "custom_server_display",
        "billing_plan_display",
        "created_at",
    )

    list_filter = (
        "vulnerability_provider",
        "created_at",
    )

    search_fields = (
        "team__name",
        "team__key",
    )

    readonly_fields = (
        "id",
        "created_at",
        "updated_at",
        "billing_plan_display",
    )

    fieldsets = (
        (
            "Team & Settings",
            {
                "fields": (
                    "id",
                    "team",
                    "vulnerability_provider",
                    "billing_plan_display",
                )
            },
        ),
        (
            "Custom Configuration",
            {
                "fields": ("custom_dt_server",),
                "description": (
                    "Enterprise teams can configure their own Dependency Track server. "
                    "Business teams use the shared server pool."
                ),
            },
        ),
        (
            "Timestamps",
            {
                "fields": (
                    "created_at",
                    "updated_at",
                ),
                "classes": ("collapse",),
            },
        ),
    )

    def vulnerability_provider_display(self, obj):
        """Display vulnerability provider with icon."""
        if obj.vulnerability_provider == "osv":
            return format_html('<span style="color: #0066cc;">üîç {}</span>', obj.get_vulnerability_provider_display())
        else:
            return format_html('<span style="color: #28a745;">‚ö° {}</span>', obj.get_vulnerability_provider_display())

    vulnerability_provider_display.short_description = "Provider"

    def custom_server_display(self, obj):
        """Display custom server info."""
        if obj.custom_dt_server:
            return format_html('<span style="color: #28a745;">‚úì {}</span>', obj.custom_dt_server.name)
        return format_html('<span style="color: #6c757d;">Default pool</span>')

    custom_server_display.short_description = "DT Server"

    def billing_plan_display(self, obj):
        """Display team's billing plan."""
        if obj.team.billing_plan:
            return format_html('<span style="color: #28a745;">{}</span>', obj.team.billing_plan.title())
        return format_html('<span style="color: #6c757d;">Community</span>')

    billing_plan_display.short_description = "Plan"


@admin.register(ComponentDependencyTrackMapping)
class ComponentDependencyTrackMappingAdmin(admin.ModelAdmin):
    """Admin configuration for ComponentDependencyTrackMapping model."""

    list_display = (
        "component",
        "dt_server",
        "dt_project_name",
        "last_sbom_upload",
        "last_metrics_sync",
        "created_at",
    )

    list_filter = (
        "dt_server",
        "last_sbom_upload",
        "created_at",
    )

    search_fields = (
        "component__name",
        "dt_project_name",
        "dt_project_uuid",
    )

    readonly_fields = (
        "id",
        "dt_project_uuid",
        "last_sbom_upload",
        "last_metrics_sync",
        "created_at",
        "updated_at",
    )

    fieldsets = (
        (
            "Mapping Information",
            {
                "fields": (
                    "id",
                    "component",
                    "dt_server",
                    "dt_project_uuid",
                    "dt_project_name",
                )
            },
        ),
        (
            "Sync Status",
            {
                "fields": (
                    "last_sbom_upload",
                    "last_metrics_sync",
                )
            },
        ),
        (
            "Timestamps",
            {
                "fields": (
                    "created_at",
                    "updated_at",
                ),
                "classes": ("collapse",),
            },
        ),
    )


@admin.register(VulnerabilityScanResult)
class VulnerabilityScanResultAdmin(admin.ModelAdmin):
    """Admin configuration for VulnerabilityScanResult model."""

    list_display = (
        "sbom",
        "provider",
        "scan_trigger",
        "vulnerability_summary",
        "created_at",
    )

    list_filter = (
        "provider",
        "scan_trigger",
        "created_at",
    )

    search_fields = (
        "sbom__name",
        "sbom__component__name",
    )

    readonly_fields = (
        "id",
        "vulnerability_summary",
        "total_vulnerabilities",
        "critical_vulnerabilities",
        "high_vulnerabilities",
        "medium_vulnerabilities",
        "low_vulnerabilities",
        "created_at",
        "updated_at",
    )

    fieldsets = (
        (
            "Scan Information",
            {
                "fields": (
                    "id",
                    "sbom",
                    "provider",
                    "scan_trigger",
                    "component_mapping",
                )
            },
        ),
        (
            "Results",
            {
                "fields": (
                    "vulnerability_summary",
                    "vulnerability_count",
                    "findings",
                    "scan_metadata",
                )
            },
        ),
        (
            "Denormalized Counts",
            {
                "fields": (
                    "total_vulnerabilities",
                    "critical_vulnerabilities",
                    "high_vulnerabilities",
                    "medium_vulnerabilities",
                    "low_vulnerabilities",
                )
            },
        ),
        (
            "Historical Tracking",
            {
                "fields": (
                    "created_at",
                    "updated_at",
                )
            },
        ),
    )

    def vulnerability_summary(self, obj):
        """Display a summary of vulnerabilities."""
        if not obj.vulnerability_count:
            return "No data"

        total = sum(obj.vulnerability_count.values()) if isinstance(obj.vulnerability_count, dict) else 0
        critical = obj.vulnerability_count.get("critical", 0) if isinstance(obj.vulnerability_count, dict) else 0

        if critical > 0:
            color = "#dc3545"  # Red for critical
        elif total > 0:
            color = "#ffc107"  # Yellow for vulnerabilities
        else:
            color = "#28a745"  # Green for clean

        return format_html(
            '<span style="color: {}; font-weight: bold;">{} vulnerabilities ({} critical)</span>',
            color,
            total,
            critical,
        )

    vulnerability_summary.short_description = "Summary"
