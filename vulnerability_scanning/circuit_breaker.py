"""Circuit breaker pattern for vulnerability scanning resilience."""

import logging
import time
from enum import Enum
from typing import Any, Callable, Optional

from django.core.cache import cache

logger = logging.getLogger(__name__)


class CircuitState(Enum):
    """Circuit breaker states."""

    CLOSED = "closed"  # Normal operation
    OPEN = "open"  # Circuit is open, failing fast
    HALF_OPEN = "half_open"  # Testing if service is back


class CircuitBreaker:
    """
    Circuit breaker for external service calls.

    Prevents cascading failures by failing fast when a service is down.
    """

    def __init__(
        self,
        name: str,
        failure_threshold: int = 5,
        recovery_timeout: int = 60,
        expected_exception: type = Exception,
    ):
        """
        Initialize circuit breaker.

        Args:
            name: Unique name for this circuit breaker
            failure_threshold: Number of failures before opening circuit
            recovery_timeout: Seconds to wait before trying again
            expected_exception: Exception type to catch
        """
        self.name = name
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.expected_exception = expected_exception

        # Cache keys for state persistence
        self.state_key = f"circuit_breaker:{name}:state"
        self.failure_count_key = f"circuit_breaker:{name}:failures"
        self.last_failure_key = f"circuit_breaker:{name}:last_failure"

    @property
    def state(self) -> CircuitState:
        """Get current circuit state."""
        state_str = cache.get(self.state_key, CircuitState.CLOSED.value)
        return CircuitState(state_str)

    @state.setter
    def state(self, value: CircuitState) -> None:
        """Set circuit state."""
        cache.set(self.state_key, value.value, timeout=None)
        logger.info(f"Circuit breaker '{self.name}' state changed to: {value.value}")

    @property
    def failure_count(self) -> int:
        """Get current failure count."""
        return cache.get(self.failure_count_key, 0)

    @failure_count.setter
    def failure_count(self, value: int) -> None:
        """Set failure count."""
        cache.set(self.failure_count_key, value, timeout=3600)  # 1 hour timeout

    @property
    def last_failure_time(self) -> Optional[float]:
        """Get timestamp of last failure."""
        return cache.get(self.last_failure_key)

    @last_failure_time.setter
    def last_failure_time(self, value: float) -> None:
        """Set timestamp of last failure."""
        cache.set(self.last_failure_key, value, timeout=3600)  # 1 hour timeout

    def call(self, func: Callable, *args, **kwargs) -> Any:
        """
        Execute function through circuit breaker.

        Args:
            func: Function to execute
            *args: Function arguments
            **kwargs: Function keyword arguments

        Returns:
            Function result

        Raises:
            CircuitBreakerOpenError: When circuit is open
            Original exception: When circuit is closed/half-open
        """
        current_state = self.state

        if current_state == CircuitState.OPEN:
            if self._should_attempt_reset():
                self.state = CircuitState.HALF_OPEN
                logger.info(f"Circuit breaker '{self.name}' transitioning to HALF_OPEN")
            else:
                raise CircuitBreakerOpenError(
                    f"Circuit breaker '{self.name}' is OPEN. Next retry in {self._time_until_retry():.1f} seconds"
                )

        try:
            result = func(*args, **kwargs)
            self._on_success()
            return result

        except self.expected_exception as e:
            self._on_failure()
            raise e

    def _should_attempt_reset(self) -> bool:
        """Check if enough time has passed to attempt reset."""
        if self.last_failure_time is None:
            return True

        time_since_failure = time.time() - self.last_failure_time
        return time_since_failure >= self.recovery_timeout

    def _time_until_retry(self) -> float:
        """Calculate seconds until next retry attempt."""
        if self.last_failure_time is None:
            return 0

        time_since_failure = time.time() - self.last_failure_time
        return max(0, self.recovery_timeout - time_since_failure)

    def _on_success(self) -> None:
        """Handle successful call."""
        if self.state == CircuitState.HALF_OPEN:
            logger.info(f"Circuit breaker '{self.name}' call succeeded, closing circuit")
            self.state = CircuitState.CLOSED

        # Reset failure count on success
        self.failure_count = 0

    def _on_failure(self) -> None:
        """Handle failed call."""
        self.failure_count += 1
        self.last_failure_time = time.time()

        logger.warning(f"Circuit breaker '{self.name}' failure {self.failure_count}/{self.failure_threshold}")

        if self.failure_count >= self.failure_threshold:
            self.state = CircuitState.OPEN
            logger.error(
                f"Circuit breaker '{self.name}' opened after {self.failure_count} failures. "
                f"Will retry in {self.recovery_timeout} seconds"
            )

    def reset(self) -> None:
        """Manually reset circuit breaker."""
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        logger.info(f"Circuit breaker '{self.name}' manually reset")

    def get_stats(self) -> dict:
        """Get circuit breaker statistics."""
        return {
            "name": self.name,
            "state": self.state.value,
            "failure_count": self.failure_count,
            "failure_threshold": self.failure_threshold,
            "last_failure_time": self.last_failure_time,
            "time_until_retry": self._time_until_retry() if self.state == CircuitState.OPEN else 0,
            "recovery_timeout": self.recovery_timeout,
        }


class CircuitBreakerOpenError(Exception):
    """Exception raised when circuit breaker is open."""

    pass


# Pre-configured circuit breakers for common services
osv_circuit_breaker = CircuitBreaker(
    name="osv_scanner",
    failure_threshold=3,
    recovery_timeout=30,
    expected_exception=Exception,
)

dependency_track_circuit_breaker = CircuitBreaker(
    name="dependency_track",
    failure_threshold=5,
    recovery_timeout=60,
    expected_exception=Exception,
)
