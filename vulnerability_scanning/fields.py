"""Custom fields for vulnerability scanning models."""

from django.conf import settings
from django.db import models


class SecureCharField(models.CharField):
    """
    CharField for sensitive data with a warning for proper encryption.

    This is a placeholder that behaves like a regular CharField but warns
    when proper encryption isn't configured. For production use, consider
    integrating with django-cryptography or similar proper encryption solutions.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Warn if no proper encryption solution is configured
        if settings.DEBUG:
            import logging

            logger = logging.getLogger(__name__)
            logger.warning(
                "SecureCharField stores sensitive data. "
                "Consider adding django-cryptography for proper field encryption in production."
            )

    def contribute_to_class(self, cls, name, private_only=False):
        super().contribute_to_class(cls, name, private_only)
        # Update help text to indicate this field contains sensitive data
        if not self.help_text:
            self.help_text = "Sensitive data - should be encrypted in production"
        elif "sensitive" not in self.help_text.lower():
            self.help_text += " (sensitive data)"
