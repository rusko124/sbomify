"""Django management command to trigger weekly vulnerability scanning task."""

from django.core.management.base import BaseCommand


class Command(BaseCommand):
    """Command to trigger the weekly vulnerability scan task."""

    help = "Trigger weekly vulnerability scan task (queues the Dramatiq task)"

    def add_arguments(self, parser):
        """Add command line arguments."""
        parser.add_argument(
            "--days-back",
            type=int,
            default=7,
            help="Only scan releases created in the last N days (default: 7)",
        )
        parser.add_argument(
            "--team-key",
            type=str,
            help="Only scan releases for a specific team (for testing)",
        )
        parser.add_argument(
            "--force-rescan",
            action="store_true",
            help="Force rescan even if recent scans exist",
        )
        parser.add_argument(
            "--max-releases",
            type=int,
            help="Maximum number of releases to scan (for testing)",
        )

    def handle(self, *args, **options):
        """Execute the command by queuing the weekly scan task."""
        from vulnerability_scanning.tasks import weekly_vulnerability_scan_task

        # Extract arguments
        kwargs = {}
        if options.get("days_back"):
            kwargs["days_back"] = options["days_back"]
        if options.get("team_key"):
            kwargs["team_key"] = options["team_key"]
        if options.get("force_rescan"):
            kwargs["force_rescan"] = options["force_rescan"]
        if options.get("max_releases"):
            kwargs["max_releases"] = options["max_releases"]

        # Queue the task
        task_result = weekly_vulnerability_scan_task.send(**kwargs)

        self.stdout.write(self.style.SUCCESS("âœ… Weekly vulnerability scan task queued successfully!"))
        self.stdout.write(f"Task ID: {task_result.message_id}")
        self.stdout.write("The task will be processed by the Dramatiq worker.")

        if kwargs:
            self.stdout.write(f"Task parameters: {kwargs}")

        self.stdout.write("\nðŸ’¡ To monitor progress, check the worker logs or use your task monitoring system.")
