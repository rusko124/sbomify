"""Tests for vulnerability scanning API endpoints."""

import json
import pytest
import uuid
from unittest.mock import Mock, patch
from django.test import Client
from django.urls import reverse

from core.tests.shared_fixtures import (
    authenticated_api_client,
    get_api_headers,
    sample_user,
    guest_user,
)
from billing.tests.fixtures import (
    business_plan,
    enterprise_plan,
    community_plan,
)
from teams.fixtures import sample_team
from sboms.tests.fixtures import sample_component, sample_sbom
from teams.models import Member


@pytest.mark.django_db
class TestVulnerabilitySettingsAPI:
    """Test vulnerability settings API endpoints."""

    @pytest.fixture(autouse=True)
    def setup_test_data(self, sample_team, sample_user, business_plan):
        """Set up test data for vulnerability settings tests."""
        self.team = sample_team
        self.user = sample_user

        # Set team to business plan
        self.team.billing_plan = "business"
        self.team.save()

        # Ensure user is owner of the team
        member, created = Member.objects.get_or_create(
            user=self.user,
            team=self.team,
            defaults={'role': 'owner'}
        )
        if not created:
            member.role = 'owner'
            member.save()

    def test_get_vulnerability_settings_success(self, authenticated_api_client):
        """Test getting team vulnerability settings."""
        client, access_token = authenticated_api_client

        response = client.get(
            f"/api/v1/vulnerability-scanning/workspaces/{self.team.key}/vulnerability-settings",
            **get_api_headers(access_token)
        )

        assert response.status_code == 200
        data = response.json()

        assert data["vulnerability_provider"] in ["osv", "dependency_track"]
        assert "available_providers" in data
        assert "can_use_custom_dt" in data
        assert data["current_plan"] == "business"

    def test_get_vulnerability_settings_unauthorized(self):
        """Test getting vulnerability settings without authentication."""
        client = Client()

        response = client.get(
            f"/api/v1/vulnerability-scanning/workspaces/{self.team.key}/vulnerability-settings"
        )

        assert response.status_code == 401

    def test_update_vulnerability_settings_success(self, authenticated_api_client):
        """Test updating vulnerability settings."""
        client, access_token = authenticated_api_client

        payload = {
            "vulnerability_provider": "dependency_track"
        }

        response = client.put(
            f"/api/v1/vulnerability-scanning/workspaces/{self.team.key}/vulnerability-settings",
            data=json.dumps(payload),
            content_type="application/json",
            **get_api_headers(access_token)
        )

        assert response.status_code == 200
        data = response.json()
        assert data["vulnerability_provider"] == "dependency_track"

    def test_update_vulnerability_settings_community_plan_restriction(self, authenticated_api_client, community_plan):
        """Test that community plans can't use Dependency Track."""
        # Set team to community plan
        self.team.billing_plan = "community"
        self.team.save()

        client, access_token = authenticated_api_client

        payload = {
            "vulnerability_provider": "dependency_track"
        }

        response = client.put(
            f"/api/v1/vulnerability-scanning/workspaces/{self.team.key}/vulnerability-settings",
            data=json.dumps(payload),
            content_type="application/json",
            **get_api_headers(access_token)
        )

        assert response.status_code == 400
        data = response.json()
        assert "Business and Enterprise plans" in data["detail"]


# Manual scan API tests removed - replaced with weekly batch scanning system

    def test_manual_scan_nonexistent_sbom(self, authenticated_api_client):
        """Test manual scan with non-existent SBOM."""
        client, access_token = authenticated_api_client

        fake_sbom_id = "nonexistent123"

        response = client.post(
            f"/api/v1/vulnerability-scanning/sboms/{fake_sbom_id}/scan",
            data=json.dumps({"force_rescan": False}),
            content_type="application/json",
            **get_api_headers(access_token)
        )

        assert response.status_code == 404


@pytest.mark.django_db
class TestVulnerabilityStatsAPI:
    """Test vulnerability statistics API endpoints."""

    @pytest.fixture(autouse=True)
    def setup_test_data(self, sample_team, sample_user):
        """Set up test data for stats tests."""
        self.team = sample_team
        self.user = sample_user

        # Ensure user is member of the team
        Member.objects.get_or_create(
            user=self.user,
            team=self.team,
            defaults={'role': 'owner'}
        )

    def test_get_vulnerability_stats_success(self, authenticated_api_client):
        """Test getting vulnerability statistics."""
        client, access_token = authenticated_api_client

        response = client.get(
            f"/api/v1/vulnerability-scanning/workspaces/{self.team.key}/vulnerability-stats",
            **get_api_headers(access_token)
        )

        assert response.status_code == 200
        data = response.json()

        assert "total_components" in data
        assert "total_scans" in data
        assert "total_vulnerabilities" in data
        assert "provider_stats" in data
        assert "recent_results" in data

    def test_get_vulnerability_timeseries_success(self, authenticated_api_client):
        """Test getting vulnerability time series data."""
        client, access_token = authenticated_api_client

        response = client.get(
            f"/api/v1/vulnerability-scanning/workspaces/{self.team.key}/vulnerability-timeseries?days=7",
            **get_api_headers(access_token)
        )

        assert response.status_code == 200
        data = response.json()

        assert "time_series" in data
        assert "summary" in data
        assert data["summary"]["date_range"]["days"] == 7

    def test_get_vulnerability_drill_down_success(self, authenticated_api_client):
        """Test getting vulnerability drill-down data."""
        client, access_token = authenticated_api_client

        response = client.get(
            f"/api/v1/vulnerability-scanning/workspaces/{self.team.key}/vulnerability-drill-down?filter_type=severity&filter_value=high&days=7",
            **get_api_headers(access_token)
        )

        assert response.status_code == 200
        data = response.json()

        assert "filter_type" in data
        assert data["filter_type"] == "severity"
        assert "filter_value" in data
        assert data["filter_value"] == "high"
        assert "components" in data
        assert "sboms" in data
        assert "vulnerabilities" in data
        assert "summary" in data

    def test_get_vulnerability_timeseries_with_component_filter(self, authenticated_api_client, sample_component):
        """Test getting vulnerability time series data filtered by component."""
        client, access_token = authenticated_api_client

        response = client.get(
            f"/api/v1/vulnerability-scanning/workspaces/{self.team.key}/vulnerability-timeseries"
            f"?days=30&component_id={sample_component.id}",
            **get_api_headers(access_token)
        )

        assert response.status_code == 200
        data = response.json()

        assert "time_series" in data
        assert "summary" in data
        assert data["summary"]["date_range"]["days"] == 30