"""Tests for vulnerability scanning models."""

import pytest
from datetime import datetime, timedelta
from django.core.exceptions import ValidationError
from django.db import IntegrityError
from django.utils import timezone

from teams.models import Team
from billing.models import BillingPlan
from core.models import Component
from sboms.models import SBOM
from ..models import (
    DependencyTrackServer,
    TeamVulnerabilitySettings,
    ComponentDependencyTrackMapping,
    VulnerabilityScanResult,
)


@pytest.mark.django_db
class TestDependencyTrackServer:
    """Test DependencyTrackServer model."""

    def test_create_server(self, db) -> None:
        """Test creating a DT server."""
        server = DependencyTrackServer.objects.create(
            name="Test Server",
            url="https://dt.example.com",
            api_key="test-key-123",
            priority=10,
            max_concurrent_scans=5
        )

        assert server.name == "Test Server"
        assert server.url == "https://dt.example.com"
        assert server.api_key == "test-key-123"
        assert server.is_active is True
        assert server.priority == 10
        assert server.max_concurrent_scans == 5
        assert server.current_scan_count == 0
        assert server.health_status == "unknown"

    def test_server_string_representation(self, db) -> None:
        """Test server string representation."""
        server = DependencyTrackServer.objects.create(
            name="My Server",
            url="https://example.com",
            api_key="key123"
        )
        assert str(server) == "My Server (https://example.com)"

    def test_url_uniqueness(self, db) -> None:
        """Test that server URLs must be unique."""
        DependencyTrackServer.objects.create(
            name="Server 1",
            url="https://dt.example.com",
            api_key="key1"
        )

        with pytest.raises(IntegrityError):
            DependencyTrackServer.objects.create(
                name="Server 2",
                url="https://dt.example.com",  # Same URL
                api_key="key2"
            )

    def test_priority_validation(self, db) -> None:
        """Test priority validation."""
        server = DependencyTrackServer(
            name="Test Server",
            url="https://dt.example.com",
            api_key="test-key",
            priority=0  # Invalid
        )

        with pytest.raises(ValidationError) as exc_info:
            server.full_clean()

        assert "priority" in exc_info.value.message_dict
        assert "Priority must be positive" in str(exc_info.value.message_dict["priority"])

    def test_max_concurrent_scans_validation(self, db) -> None:
        """Test max concurrent scans validation."""
        server = DependencyTrackServer(
            name="Test Server",
            url="https://dt.example.com",
            api_key="test-key",
            max_concurrent_scans=0  # Invalid
        )

        with pytest.raises(ValidationError) as exc_info:
            server.full_clean()

        assert "max_concurrent_scans" in exc_info.value.message_dict

    def test_is_available_for_scan(self, db) -> None:
        """Test server availability checking."""
        server = DependencyTrackServer.objects.create(
            name="Test Server",
            url="https://dt.example.com",
            api_key="test-key",
            max_concurrent_scans=2,
            current_scan_count=1,
            health_status="healthy"
        )

        # Should be available
        assert server.is_available_for_scan is True

        # Make it at capacity
        server.current_scan_count = 2
        server.save()
        assert server.is_available_for_scan is False

        # Make it inactive
        server.current_scan_count = 1
        server.is_active = False
        server.save()
        assert server.is_available_for_scan is False

        # Make it unhealthy
        server.is_active = True
        server.health_status = "unhealthy"
        server.save()
        assert server.is_available_for_scan is False


@pytest.mark.django_db
class TestTeamVulnerabilitySettings:
    """Test TeamVulnerabilitySettings model."""

    def test_create_settings_default(self, team_with_business_plan) -> None:
        """Test creating team settings with defaults."""
        settings = TeamVulnerabilitySettings.objects.create(
            team=team_with_business_plan
        )

        assert settings.vulnerability_provider == "osv"
        assert settings.custom_dt_server is None

    def test_string_representation(self, team_with_business_plan) -> None:
        """Test settings string representation."""
        settings = TeamVulnerabilitySettings.objects.create(
            team=team_with_business_plan,
            vulnerability_provider="dependency_track"
        )

        expected = f"{team_with_business_plan.name} - Dependency Track"
        assert str(settings) == expected

    def test_one_to_one_relationship(self, team_with_business_plan) -> None:
        """Test one-to-one relationship with team."""
        # Create first settings
        TeamVulnerabilitySettings.objects.create(team=team_with_business_plan)

        # Try to create another - should fail
        with pytest.raises(IntegrityError):
            TeamVulnerabilitySettings.objects.create(team=team_with_business_plan)

    def test_dependency_track_requires_business_plan(self, team_with_community_plan) -> None:
        """Test that DT requires Business+ plan."""
        settings = TeamVulnerabilitySettings(
            team=team_with_community_plan,
            vulnerability_provider="dependency_track"
        )

        with pytest.raises(ValidationError) as exc_info:
            settings.full_clean()

        assert "vulnerability_provider" in exc_info.value.message_dict

    def test_custom_server_requires_enterprise_plan(self, team_with_business_plan, dependency_track_server) -> None:
        """Test that custom DT servers require Enterprise plan."""
        settings = TeamVulnerabilitySettings(
            team=team_with_business_plan,  # Business, not Enterprise
            vulnerability_provider="dependency_track",
            custom_dt_server=dependency_track_server
        )

        with pytest.raises(ValidationError) as exc_info:
            settings.full_clean()

        assert "custom_dt_server" in exc_info.value.message_dict

    def test_custom_server_requires_dt_provider(self, team_with_enterprise_plan, dependency_track_server) -> None:
        """Test that custom server requires DT provider."""
        settings = TeamVulnerabilitySettings(
            team=team_with_enterprise_plan,
            vulnerability_provider="osv",  # Not DT
            custom_dt_server=dependency_track_server
        )

        with pytest.raises(ValidationError) as exc_info:
            settings.full_clean()

        assert "custom_dt_server" in exc_info.value.message_dict

    def test_enterprise_with_custom_server_valid(self, team_with_enterprise_plan, dependency_track_server) -> None:
        """Test valid Enterprise config with custom server."""
        settings = TeamVulnerabilitySettings(
            team=team_with_enterprise_plan,
            vulnerability_provider="dependency_track",
            custom_dt_server=dependency_track_server
        )

        settings.full_clean()  # Should not raise
        settings.save()

        assert settings.custom_dt_server == dependency_track_server


@pytest.mark.django_db
class TestComponentDependencyTrackMapping:
    """Test ComponentDependencyTrackMapping model."""

    def test_create_mapping(self, component, dependency_track_server) -> None:
        """Test creating component mapping."""
        import uuid
        project_uuid = uuid.uuid4()

        mapping = ComponentDependencyTrackMapping.objects.create(
            component=component,
            dt_server=dependency_track_server,
            dt_project_uuid=project_uuid,
            dt_project_name="Test Project"
        )

        assert mapping.component == component
        assert mapping.dt_server == dependency_track_server
        assert mapping.dt_project_uuid == project_uuid
        assert mapping.dt_project_name == "Test Project"

    def test_string_representation(self, component, dependency_track_server) -> None:
        """Test mapping string representation."""
        import uuid
        mapping = ComponentDependencyTrackMapping.objects.create(
            component=component,
            dt_server=dependency_track_server,
            dt_project_uuid=uuid.uuid4(),
            dt_project_name="My Project"
        )

        expected = f"{component.name} -> {dependency_track_server.name}/My Project"
        assert str(mapping) == expected

    def test_unique_component_server_pair(self, component, dependency_track_server) -> None:
        """Test unique constraint on component+server."""
        import uuid

        # Create first mapping
        ComponentDependencyTrackMapping.objects.create(
            component=component,
            dt_server=dependency_track_server,
            dt_project_uuid=uuid.uuid4(),
            dt_project_name="Project 1"
        )

        # Try to create another mapping for same component+server
        with pytest.raises(IntegrityError):
            ComponentDependencyTrackMapping.objects.create(
                component=component,
                dt_server=dependency_track_server,
                dt_project_uuid=uuid.uuid4(),
                dt_project_name="Project 2"
            )


@pytest.mark.django_db
class TestVulnerabilityScanResult:
    """Test VulnerabilityScanResult model."""

    def test_create_osv_result(self, sbom) -> None:
        """Test creating OSV scan result."""
        result = VulnerabilityScanResult.objects.create(
            sbom=sbom,
            provider="osv",
            scan_trigger="manual",
            vulnerability_count={"total": 5, "critical": 1, "high": 2, "medium": 2},
            findings=[],  # Direct array format for standardized storage
            scan_metadata={"provider": "osv", "scan_type": "comprehensive"},
            total_vulnerabilities=5,
            critical_vulnerabilities=1,
            high_vulnerabilities=2,
            medium_vulnerabilities=2,
            low_vulnerabilities=0
        )

        assert result.provider == "osv"
        assert result.vulnerability_count["total"] == 5
        assert result.total_vulnerabilities == 5
        assert result.critical_vulnerabilities == 1
        assert result.component_mapping is None

    def test_create_dt_result(self, sbom, component_dt_mapping) -> None:
        """Test creating DT scan result."""
        result = VulnerabilityScanResult.objects.create(
            sbom=sbom,
            provider="dependency_track",
            component_mapping=component_dt_mapping,
            scan_trigger="upload",
            vulnerability_count={"total": 3, "critical": 0, "high": 1, "medium": 2},
            findings=[],  # Direct array format for standardized storage
            scan_metadata={"risk_score": 7.2, "provider": "dependency_track"},
            total_vulnerabilities=3,
            critical_vulnerabilities=0,
            high_vulnerabilities=1,
            medium_vulnerabilities=2,
            low_vulnerabilities=0
        )

        assert result.provider == "dependency_track"
        assert result.component_mapping == component_dt_mapping
        assert result.total_vulnerabilities == 3
        assert result.high_vulnerabilities == 1
        assert result.scan_metadata["risk_score"] == 7.2

    def test_string_representation(self, sbom) -> None:
        """Test result string representation."""
        result = VulnerabilityScanResult.objects.create(
            sbom=sbom,
            provider="osv",
            scan_trigger="manual",
            vulnerability_count={"total": 5},
            findings=[],
            scan_metadata={},
            total_vulnerabilities=5,
            critical_vulnerabilities=0,
            high_vulnerabilities=0,
            medium_vulnerabilities=0,
            low_vulnerabilities=0
        )

        assert "OSV Scanner Results for" in str(result)
        assert sbom.name in str(result)

    def test_scan_trigger_tracking(self, sbom) -> None:
        """Test scan trigger tracking functionality."""
        result = VulnerabilityScanResult.objects.create(
            sbom=sbom,
            provider="osv",
            scan_trigger="weekly",
            vulnerability_count={"total": 0},
            findings=[],
            scan_metadata={"trigger_source": "batch_scanner"},
            total_vulnerabilities=0,
            critical_vulnerabilities=0,
            high_vulnerabilities=0,
            medium_vulnerabilities=0,
            low_vulnerabilities=0
        )

        assert result.scan_trigger == "weekly"
        assert result.scan_metadata["trigger_source"] == "batch_scanner"


# Test fixtures
@pytest.fixture
def team_with_community_plan(db):
    """Create team with community plan."""
    plan = BillingPlan.objects.create(
        key="community",
        name="Community",
        description="Community plan with basic features"
    )
    team = Team.objects.create(name="Community Team", billing_plan=plan.key)
    return team


@pytest.fixture
def team_with_business_plan(db):
    """Create team with business plan."""
    plan = BillingPlan.objects.create(
        key="business",
        name="Business",
        description="Business plan with vulnerability scanning",
        max_users=10
    )
    team = Team.objects.create(name="Business Team", billing_plan=plan.key)
    return team


@pytest.fixture
def team_with_enterprise_plan(db):
    """Create team with enterprise plan."""
    plan = BillingPlan.objects.create(
        key="enterprise",
        name="Enterprise",
        description="Enterprise plan with unlimited features",
        max_users=None  # Unlimited
    )
    team = Team.objects.create(name="Enterprise Team", billing_plan=plan.key)
    return team


@pytest.fixture
def dependency_track_server(db):
    """Create a DT server."""
    return DependencyTrackServer.objects.create(
        name="Test DT Server",
        url="https://dt.example.com",
        api_key="test-key-123"
    )


@pytest.fixture
def component(team_with_business_plan):
    """Create a component."""
    return Component.objects.create(
        name="Test Component",
        team=team_with_business_plan,
        component_type="sbom"
    )


@pytest.fixture
def sbom(component):
    """Create an SBOM."""
    return SBOM.objects.create(
        name="test-sbom.json",
        component=component,
        format="cyclonedx",
        format_version="1.5",
        source="test"
    )


@pytest.fixture
def component_dt_mapping(component, dependency_track_server):
    """Create a component-DT mapping."""
    import uuid
    return ComponentDependencyTrackMapping.objects.create(
        component=component,
        dt_server=dependency_track_server,
        dt_project_uuid=uuid.uuid4(),
        dt_project_name="Test Project"
    )