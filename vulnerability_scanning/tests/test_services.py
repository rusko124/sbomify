import pytest
from django.test import override_settings
from unittest.mock import patch, Mock

from ..services import VulnerabilityScanningService


class TestEnvironmentPrefix:
    """Test environment prefix generation."""

    def test_get_environment_prefix_production(self):
        """Test environment prefix for production URLs."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='https://app.sbomify.com'):
            assert service._get_environment_prefix() == "prod"

        with override_settings(APP_BASE_URL='https://sbomify.com'):
            assert service._get_environment_prefix() == "prod"

    def test_get_environment_prefix_staging(self):
        """Test environment prefix for staging URLs."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='https://staging.sbomify.com'):
            assert service._get_environment_prefix() == "staging"

        with override_settings(APP_BASE_URL='https://staging-api.sbomify.com'):
            assert service._get_environment_prefix() == "staging"

    def test_get_environment_prefix_development(self):
        """Test environment prefix for development URLs."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='https://dev.sbomify.com'):
            assert service._get_environment_prefix() == "dev"

        with override_settings(APP_BASE_URL='https://development.sbomify.com'):
            assert service._get_environment_prefix() == "dev"

    def test_get_environment_prefix_local(self):
        """Test environment prefix for local development."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='http://localhost:8000'):
            assert service._get_environment_prefix() == "local"

        with override_settings(APP_BASE_URL='http://127.0.0.1:8000'):
            assert service._get_environment_prefix() == "local"

    def test_get_environment_prefix_test(self):
        """Test environment prefix for test URLs."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='https://test.sbomify.com'):
            assert service._get_environment_prefix() == "test"

    def test_get_environment_prefix_custom(self):
        """Test environment prefix for custom URLs."""
        service = VulnerabilityScanningService()

        # Should use the first part of the hostname
        with override_settings(APP_BASE_URL='https://demo.sbomify.com'):
            assert service._get_environment_prefix() == "demo"

        with override_settings(APP_BASE_URL='https://client-staging.sbomify.com'):
            assert service._get_environment_prefix() == "staging"  # 'staging' keyword takes precedence

    def test_get_environment_prefix_unknown(self):
        """Test environment prefix fallback cases."""
        service = VulnerabilityScanningService()

        # Empty URL
        with override_settings(APP_BASE_URL=''):
            assert service._get_environment_prefix() == "unknown"

        # Invalid URL
        with override_settings(APP_BASE_URL='not-a-url'):
            assert service._get_environment_prefix() == "unknown"

    @patch('vulnerability_scanning.services.logger')
    def test_get_environment_prefix_exception_handling(self, mock_logger):
        """Test that exceptions are handled gracefully."""
        service = VulnerabilityScanningService()

        # Simulate an exception by removing APP_BASE_URL from settings
        with patch('vulnerability_scanning.services.getattr', side_effect=Exception("Test error")):
            result = service._get_environment_prefix()
            assert result == "unknown"
            mock_logger.warning.assert_called_once()