import pytest
from django.test import override_settings
from unittest.mock import patch, Mock

from teams.models import Team
from billing.models import BillingPlan
from ..services import VulnerabilityScanningService, VulnerabilityProviderError
from ..models import DependencyTrackServer


class TestEnvironmentPrefix:
    """Test environment prefix generation."""

    def test_get_environment_prefix_production(self):
        """Test environment prefix for production URLs."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='https://app.sbomify.com'):
            assert service._get_environment_prefix() == "prod"

        with override_settings(APP_BASE_URL='https://sbomify.com'):
            assert service._get_environment_prefix() == "prod"

    def test_get_environment_prefix_staging(self):
        """Test environment prefix for staging URLs."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='https://staging.sbomify.com'):
            assert service._get_environment_prefix() == "staging"

        with override_settings(APP_BASE_URL='https://staging-api.sbomify.com'):
            assert service._get_environment_prefix() == "staging"

    def test_get_environment_prefix_development(self):
        """Test environment prefix for development URLs."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='https://dev.sbomify.com'):
            assert service._get_environment_prefix() == "dev"

        with override_settings(APP_BASE_URL='https://development.sbomify.com'):
            assert service._get_environment_prefix() == "dev"

    def test_get_environment_prefix_local(self):
        """Test environment prefix for local development."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='http://localhost:8000'):
            assert service._get_environment_prefix() == "local"

        with override_settings(APP_BASE_URL='http://127.0.0.1:8000'):
            assert service._get_environment_prefix() == "local"

    def test_get_environment_prefix_test(self):
        """Test environment prefix for test URLs."""
        service = VulnerabilityScanningService()

        with override_settings(APP_BASE_URL='https://test.sbomify.com'):
            assert service._get_environment_prefix() == "test"

    def test_get_environment_prefix_custom(self):
        """Test environment prefix for custom URLs."""
        service = VulnerabilityScanningService()

        # Should use the first part of the hostname
        with override_settings(APP_BASE_URL='https://demo.sbomify.com'):
            assert service._get_environment_prefix() == "demo"

        with override_settings(APP_BASE_URL='https://client-staging.sbomify.com'):
            assert service._get_environment_prefix() == "staging"  # 'staging' keyword takes precedence

    def test_get_environment_prefix_unknown(self):
        """Test environment prefix fallback cases."""
        service = VulnerabilityScanningService()

        # Empty URL
        with override_settings(APP_BASE_URL=''):
            assert service._get_environment_prefix() == "unknown"

        # Invalid URL
        with override_settings(APP_BASE_URL='not-a-url'):
            assert service._get_environment_prefix() == "unknown"

    @patch('vulnerability_scanning.services.logger')
    def test_get_environment_prefix_exception_handling(self, mock_logger):
        """Test that exceptions are handled gracefully."""
        service = VulnerabilityScanningService()

        # Simulate an exception by removing APP_BASE_URL from settings
        with patch('vulnerability_scanning.services.getattr', side_effect=Exception("Test error")):
            result = service._get_environment_prefix()
            assert result == "unknown"
            mock_logger.warning.assert_called_once()


@pytest.mark.django_db
class TestServerSelection:
    """Test Dependency Track server selection logic."""

    def test_select_server_with_healthy_servers_available(self):
        """Test server selection when healthy servers are available."""
        service = VulnerabilityScanningService()

        # Create a team
        team = Team.objects.create(
            name="Test Team",
            key="test-team-1",
            billing_plan="business"
        )

        # Create healthy servers
        server1 = DependencyTrackServer.objects.create(
            name="Server 1",
            url="https://dt1.example.com",
            api_key="key1",
            health_status="healthy",
            priority=1,
            current_scan_count=0,
            max_concurrent_scans=10
        )

        server2 = DependencyTrackServer.objects.create(
            name="Server 2",
            url="https://dt2.example.com",
            api_key="key2",
            health_status="healthy",
            priority=2,
            current_scan_count=5,
            max_concurrent_scans=10
        )

        # Should select server1 (higher priority, lower load)
        selected = service.select_dependency_track_server(team)
        assert selected.id == server1.id

        # Verify scan count was incremented
        server1.refresh_from_db()
        assert server1.current_scan_count == 1

    def test_select_server_with_degraded_servers(self):
        """Test server selection includes degraded servers."""
        service = VulnerabilityScanningService()

        team = Team.objects.create(
            name="Test Team",
            key="test-team-2",
            billing_plan="business"
        )

        # Create degraded server
        server = DependencyTrackServer.objects.create(
            name="Degraded Server",
            url="https://dt.example.com",
            api_key="key",
            health_status="degraded",
            priority=1,
            current_scan_count=0,
            max_concurrent_scans=10
        )

        # Should select degraded server
        selected = service.select_dependency_track_server(team)
        assert selected.id == server.id

    def test_select_server_at_capacity_excluded(self):
        """Test servers at capacity are excluded."""
        service = VulnerabilityScanningService()

        team = Team.objects.create(
            name="Test Team",
            key="test-team",
            billing_plan="business"
        )

        # Create server at capacity
        DependencyTrackServer.objects.create(
            name="Full Server",
            url="https://dt.example.com",
            api_key="key",
            health_status="healthy",
            priority=1,
            current_scan_count=10,
            max_concurrent_scans=10
        )

        # Should raise error when no available servers
        with pytest.raises(VulnerabilityProviderError) as exc_info:
            service.select_dependency_track_server(team)
        assert "No available Dependency Track servers" in str(exc_info.value)

    @patch('vulnerability_scanning.services.VulnerabilityScanningService.check_dependency_track_server_health')
    def test_just_in_time_health_check_success(self, mock_health_check):
        """Test just-in-time health check when no healthy servers found."""
        service = VulnerabilityScanningService()

        team = Team.objects.create(
            name="Test Team",
            key="test-team-2",
            billing_plan="business"
        )

        # Create server with unknown status
        server = DependencyTrackServer.objects.create(
            name="Unknown Server",
            url="https://dt.example.com",
            api_key="key",
            health_status="unknown",
            priority=1,
            current_scan_count=0,
            max_concurrent_scans=10
        )

        # Mock health check to return healthy
        mock_health_check.return_value = {"status": "healthy"}

        # Should perform health check and select server
        selected = service.select_dependency_track_server(team)
        assert selected.id == server.id

        # Verify health check was called
        mock_health_check.assert_called_once_with(server)

        # Verify scan count incremented
        server.refresh_from_db()
        assert server.current_scan_count == 1

    @patch('vulnerability_scanning.services.VulnerabilityScanningService.check_dependency_track_server_health')
    def test_just_in_time_health_check_failure(self, mock_health_check):
        """Test just-in-time health check when server fails."""
        service = VulnerabilityScanningService()

        team = Team.objects.create(
            name="Test Team",
            key="test-team-2",
            billing_plan="business"
        )

        # Create server with unknown status
        DependencyTrackServer.objects.create(
            name="Unknown Server",
            url="https://dt.example.com",
            api_key="key",
            health_status="unknown",
            priority=1,
            current_scan_count=0,
            max_concurrent_scans=10
        )

        # Mock health check to return unhealthy
        mock_health_check.return_value = {"status": "unhealthy", "error": "Connection failed"}

        # Should raise error when health check fails
        with pytest.raises(VulnerabilityProviderError) as exc_info:
            service.select_dependency_track_server(team)
        assert "No available Dependency Track servers" in str(exc_info.value)

        # Verify health check was called
        mock_health_check.assert_called_once()

    @patch('vulnerability_scanning.services.VulnerabilityScanningService.check_dependency_track_server_health')
    def test_just_in_time_health_check_with_multiple_servers(self, mock_health_check):
        """Test just-in-time health check tries multiple servers."""
        service = VulnerabilityScanningService()

        team = Team.objects.create(
            name="Test Team",
            key="test-team-2",
            billing_plan="business"
        )

        # Create servers with unknown status
        server1 = DependencyTrackServer.objects.create(
            name="Server 1",
            url="https://dt1.example.com",
            api_key="key1",
            health_status="unknown",
            priority=1,
            current_scan_count=0,
            max_concurrent_scans=10
        )

        server2 = DependencyTrackServer.objects.create(
            name="Server 2",
            url="https://dt2.example.com",
            api_key="key2",
            health_status="unknown",
            priority=2,
            current_scan_count=0,
            max_concurrent_scans=10
        )

        # Mock health check - first fails, second succeeds
        mock_health_check.side_effect = [
            {"status": "unhealthy", "error": "Connection failed"},
            {"status": "healthy"}
        ]

        # Should select second server after first fails health check
        selected = service.select_dependency_track_server(team)
        assert selected.id == server2.id

        # Verify both health checks were called
        assert mock_health_check.call_count == 2